as.numeric(xt)
View(xt)
xt<- t(x)
View(xt)
View(x)
help(sub)
IPI %>%
sub(',','.',)
IPI %>%
sub(',','.',)
sub(',','.',)
sub(',','.', xt)
xx<-  sub(',','.', xt)
View(xx)
library(readr)
library(ggplot2)
library(stringi)
library(readr)
library(anytime)
library(astsa)
library(xts)
library(readxl)
library(stringr)
library(dplyr)
#comprobaciones sobre la nueva xts que acabo de crear con todos los IPI
class(IPRI)
library(readr)
library(ggplot2)
library(stringi)
library(readr)
library(anytime)
library(astsa)
library(xts)
library(readxl)
library(stringr)
library(dplyr)
library(fpp2)
library(tsbox)
setwd("~/Documentos/Rstudio/TFM/IPI_base(2015)")
#BC<-read.csv2('bienes_consumo.csv',header = FALSE, stringsAsFactors = FALSE)
list.files(pattern=".csv$")
list.filenames<-list.files(pattern=".csv$")
# create an empty list that will serve as a container to receive the incoming files
list.data<-list()
# create a loop to read in your data
for (i in 1:length(list.filenames))
{
list.data[[i]]<-read.csv2(list.filenames[i], header = FALSE, stringsAsFactors = FALSE)
}
# add the names of your data to the list
#les quito la terminación "csv" antes de seguir
list.filenames<-gsub(".csv","",list.filenames)
names(list.data)<-list.filenames
#función que hace el limpia y con las fechas y me convierte cada fichero en un objeto xts acumulados en una lista
xts_gen <- function(datos){
#limpiado datos
#quito los espacios en blanco del principio
datos$V1<-stri_trim(datos$V1)
#convirtiéndolos en fechas
datos$V1<-parse_date(datos$V1,"%Y %B ",locale=locale("es")) #el primer datos no sale porque tiene una (p) al final... simplemente lo introduzco a mano
datos$V1[1]<-as.Date("2018-07-01")
datos$V1 #ya tengo mis fechas como las quiero
class(datos)
#*********QUIZÁ DEBERÍA REPETIRLO TODO USANDO UN OBJETO TS???*****************
#xts es una matriz en la que el índice son fechas
#Lo convierto en un objeto xts **No sé si es mejor convertirlo en un objeto ts
result<-(xts(datos[,-1], order.by = datos[,1]))
return(result)
}
#esta función me hace lo mismo que un for para los elementos de una lista MUY CREMA
lapply(list.data, head) #compruebo mis tablas
#creoo una nueva lista con las nuevas tablas xts
list.data_xts<-list()
#le aplico la función a toda la lista
list.data_xts<-lapply(list.data, xts_gen)
#compruebo que todo está bien
lapply(list.data_xts,class)
lapply(list.data_xts,periodicity)
lapply(list.data_xts,nmonths)
lapply(list.data_xts,head)
lapply(list.data_xts, tail)
lapply(list.data_xts, summary)
#creo la xts con todo
i= 1
IPI<- merge.xts(list.data_xts[[i]],list.data_xts[[i+1]])
for (i in 3:length(list.data_xts)){
IPI<- merge.xts(IPI,list.data_xts[[i]])
}
#comprobaciones sobre la nueva xts que acabo de crear con todos los IPI
class(IPI)
head(IPI)
names(IPI)
coredata(IPI)
index(IPI)
#Cambio el nombre de las columnas al original porque merge hace lo que le da la ganacon eso
IPI<-`colnames<-`(IPI,(c(list.filenames)))
head(IPI)
plot.zoo(x = IPI[ ,c(list.filenames)])
IPI_diff<-diff(IPI)
#diff sirve para hacer cualquier time series estacionaria
plot.zoo(x = IPI_diff[ ,c(list.filenames)])
#otro tipo de ploteo
autoplot(IPI, facets =  FALSE)
#no sé que es facets en realidad
#plotear mi serie por estaciones (útil si mi serie es estacional)
ggseasonplot(as.ts(IPI$general)) #SOLO PARA TS.. NO SIRVE PARA XTS... y
#con coordenadas polares
#***********************LO MISMO PARA EL IPRI***********************
setwd("~/Documentos/Rstudio/TFM/IPRI_base(2015)")
# create a loop to read in your data
for (i in 1:length(list.filenames))
{
list.data[[i]]<-read.csv2(list.filenames[i], header = FALSE, stringsAsFactors = FALSE)
}
# add the names of your data to the list
#les quito la terminación "csv" antes de seguir
list.filenames<-gsub(".csv","",list.filenames)
names(list.data)<-list.filenames
#esta función me hace lo mismo que un for para los elementos de una lista MUY CREMA
lapply(list.data, head) #compruebo mis tablas
#creoo una nueva lista con las nuevas tablas xts
list.data_xts<-list()
#le aplico la función a toda la lista
list.data_xts<-lapply(list.data, xts_gen)
#compruebo que todo está bien
lapply(list.data_xts,class)
lapply(list.data_xts,periodicity)
lapply(list.data_xts,nmonths)
lapply(list.data_xts,head)
lapply(list.data_xts, tail)
lapply(list.data_xts, summary)
#creo la xts con todo
i= 1
IPRI<- merge.xts(list.data_xts[[i]],list.data_xts[[i+1]],join = "right")
for (i in 3:length(list.data_xts)){
IPRI<- merge.xts(IPRI,list.data_xts[[i]],join = "right")
}
#Cambio el nombre de las columnas al original porque merge hace lo que le da la ganacon eso
IPRI<-`colnames<-`(IPRI,(c(list.filenames)))
head(IPRI)
#comprobaciones sobre la nueva xts que acabo de crear con todos los IPI
class(IPRI)
head(IPRI)
names(IPRI)
coredata(IRPI)
index(IPRI)
plot.zoo(x = IPRI[ ,c(list.filenames)])
IPRI_diff<-diff(IPRI)
plot.zoo(x = IPRI_diff[ ,c(list.filenames)])
#rm(list=ls())
xts_gen2<-function(datos){
##LIMPIANDO
#FECHAS
#quito espacios en blanco en las fechas
datos$X__1<-stri_trim(datos$X__1)
#paso las fechas datos español a fechas datos ingles datostedibles por R
datos$X__1<-parse_date(datos$X__1,"%Y",locale=locale("es"))#el primer datos no sale porque tidatose una (p) al final... simplemdatoste lo introduzco a mano
class(datos$X__1)
datos$X__1
#NÚMEROS(LOS DATOS)
#limpio lo números porque muchos son caracteres:
#1. paso el core de los datos a data frame
df<-data.frame(datos[,2:length(datos)])
#Buvle que busca las columnas que son caracteres y las pasada a data frame
for (n in c(1:length(df))) {
if (is.numeric(df[,n])== FALSE){
df[,n] = as.numeric(df[,n])}
}
str(df) #ahora todo el mundo es número
#lo convierto datos una xts
datosxts<-(xts(df, order.by = datos$X__1))
#lo convierto datos una xts
#Arreglo el nombre de las coumnas (habían cambiado algunos caracteres)
datosxts<-`colnames<-`(datosxts,(c(names(datos[,2:length(datos)]))))
return(datosxts)
}
# datoscuesta Industrial Anual de Productos (EIAP)
## Producción por agrupaciones de actividad (CNAE-2009)
#Serie 2008-2017 (miles de euros) (datos anuales)!
remove(datos)
setwd("~/Documentos/Rstudio/TFM/EIAP")
datos<-read_xls('2008_2017.xls',skip = 7, na = "....")
#comprobando
head(datos)
str(datos)
tail(datos)
summary(datos)
EIAP_2008<-xts_gen2(datos)
head(EIAP_2008)
#summary y plot
summary(EIAP_2008)
plot.zoo(x = EIAP_2008[ ,c(names(datosxts))])
# datos_diff<-diff(datos) #PORQUÉ No funciona??
# plot.zoo(x = datos_diff[ ,c(names(datos))])
##Producción por agrupaciones de actividad (CNAE-93)
#Serie 2001-2007 (millones de pesetas).
setwd("~/Documentos/Rstudio/TFM/EIAP")
datos<-read_xls('2001_2007.xls',skip = 7)
head(datos)
str(datos)
tail(datos)
summary(datos)
EIAP_2001<-xts_gen2(datos)
head(EIAP_2001)
summary(EIAP_2001)
#summary y plot
summary(EIAP_2001)
plot.zoo(x = EIAP_2001[ ,c(names(EIAP_2001))])
##Producción por agrupaciones de actividad (CNAE-93)
#Serie 1993-2000 (millones de pesetas).
remove(datos)
setwd("~/Documentos/Rstudio/TFM/EIAP")
datos<-read_xls('1993_2000.xls',skip = 7)
head(datos)
str(datos)
tail(datos)
summary(datos)
EIAP_1993<-xts_gen2(datos)
head(EIAP_1993)
#summary y plot
summary(EIAP_1993)
plot.zoo(x = EIAP_1993[ ,c(names(EIAP_1993))])
help(merge)
ncol(EIAP_1993)
names(EIAP_1993)
ncol(EIAP_2001)
names(EIAP_2001)
ncol(EIAP_2008)
names(EIAP_1993)
rbind.xts(index(EIAP_1993),index(EIAP_2001),index(EIAP_2008))
names(EIAP_1993)==names(EIAP_2001)
#####################################ENERGÍA#####################################
#Producción bruta, disponibilidad y consumo de energía eléctrica por islas de Canarias y periodos.
setwd("~/Documentos/Rstudio/TFM/Producción_disponibilidad_consumo_energía_eléctricas")
EN<-read_xls('ENERGIA.xls',skip = 7, na = "..", n_max = 333)
#comprobando
head(EN)
str(EN)
tail(EN)
summary(EN)
#limpiando
EN$X__1<-stri_trim(EN$X__1)
#Elimino la primero línea que pone canarias
EN<-EN[-c(1),]
head(EN, n = 10)
#paso las fechas en español a fechas en ingles entedibles por R
EN$X__1<-parse_date(EN$X__1,"%Y %B ",locale=locale("es"))#el primer EN no sale porque tiene una (p) al final... simplemente lo introduzco a mano
class(EN$X__1)
#convierto las cadenas a números
EN[,2:4]<-as.data.frame.numeric(EN[,2,4])
#lo convierto en una xts
EN<-(xts(EN[,2:4], order.by = EN$X__1))
class(EN)
head(EN)
tail(EN)
summary(EN)
plot.zoo(x = EN[ ,c(names(EN))])
EN_diff<-diff(EN) #PORQUÉ No funciona??
plot.zoo(x = EN_diff[ ,c(names(EN))])
#Recopilación de estadísticas de productos derivados del petróleo
setwd("~/Documentos/Rstudio/TFM/Recopilación de estadísticas de productos derivados del petróleo")
############CONSUMO DEL FUELOLEO
remove(datos)
datos<-read_xls('consumo_fueloleo.xls',skip = 7)
#CLEANING
#Pasando a números
head(datos)
datos$FUELÓLEO
class(datos$FUELÓLEO)
tail(datos, n=10)
l<-str_remove(as.character(datos[,2]),"\\.")
l<-str_remove(datos$FUELÓLEO,"\\.")
datos$FUELÓLEO<-str_replace(l,"\\,",".") #HAY QUE PONER DOS PUNTOS SLASHES!!!!!
head(datos)
datos$FUELÓLEO<-as.numeric(datos$FUELÓLEO)
head(datos)
#cleaning dates
#quito espacios en blanco en las fechas
datos$X__1<-stri_trim(datos$X__1)
head(datos$X__1)
#paso las fechas datos español a fechas datos ingles datostedibles por R
datos$X__1<-parse_date(datos$X__1,"%Y %B ",locale=locale("es"))#el primer datos no sale porque tidatose una (p) al final... simplemdatoste lo introduzco a mano
class(datos$X__1)
head(datos$X__1)
#tabla xts
#lo convierto datos una xts
fueoleo<-(xts(datos[,2], order.by = datos$X__1))
head(fueoleo)
nrow(fueoleo)
#Recopilación de estadísticas de productos derivados del petróleo
#################CONSUMO DEL GASOLEO
remove(datos)
datos<-read_xls('consumo_Gasoleo.xls',skip = 7)
#CLEANING
#Pasando a números
head(datos)
datos<-datos[-c(1),]
class(datos$GASÓLEO)
tail(datos, n=10)
l<-str_remove(datos$GASÓLEO,"\\.")
datos$GASÓLEO<-str_replace(l,"\\,",".") #HAY QUE PONER DOS PUNTOS SLASHES!!!!!
head(datos)
datos$GASÓLEO<-as.numeric(datos$GASÓLEO)
head(datos)
#cleaning dates
#quito espacios en blanco en las fechas
datos$X__1<-stri_trim(datos$X__1)
head(datos$X__1)
#paso las fechas datos español a fechas datos ingles datostedibles por R
datos$X__1<-parse_date(datos$X__1,"%Y %B ",locale=locale("es"))#el primer datos no sale porque tidatose una (p) al final... simplemdatoste lo introduzco a mano
class(datos$X__1)
head(datos$X__1)
#tabla xts
#lo convierto datos una xts
GASOLEO<-(xts(datos[,2], order.by = datos$X__1))
head(GASOLEO)
nrow(GASOLEO)
##########################CONSUMO GASOLINA
remove(datos)
datos<-read_xls('consumo_Gasolina.xls',skip = 7)
#CLEANING
#Pasando a números
head(datos)
class(datos$GASOLINA)
tail(datos, n=10)
l<-str_remove(datos$GASOLINA,"\\.")
datos$GASOLINA<-str_replace(l,"\\,",".") #HAY QUE PONER DOS PUNTOS SLASHES!!!!!
head(datos)
datos$GASOLINA<-as.numeric(datos$GASOLINA)
head(datos)
#cleaning dates
#quito espacios en blanco en las fechas
datos$X__1<-stri_trim(datos$X__1)
head(datos$X__1)
#paso las fechas datos español a fechas datos ingles datostedibles por R
datos$X__1<-parse_date(datos$X__1,"%Y %B ",locale=locale("es"))#el primer datos no sale porque tidatose una (p) al final... simplemdatoste lo introduzco a mano
class(datos$X__1)
head(datos$X__1)
#tabla xts
#lo convierto datos una xts
gasolina<-(xts(datos[,2], order.by = datos$X__1))
head(gasolina)
nrow(gasolina)
#creo una sola tabla con todo
consumo_gas<-cbind(fueoleo,GASOLEO,gasolina)
head(consumo_gas)
#summary y plot
summary(consumo_gas)
plot.zoo(x = consumo_gas[ ,c(names(consumo_gas))])
###################################################Series mensuales del precio del petróleo. 1986 Enero - 2018 Septiembre
remove(datos)
datos<-read_xls('precio_petroleo_1968_2018.xls',skip = 7)
#CLEANING
#Pasando a números
head(datos)
class(datos$GASOLINA)
tail(datos, n=10)
l<-str_remove(datos$`Precio del petróleo (barril Brent)`,"\\.")
datos$`Precio del petróleo (barril Brent)`<-str_replace(l,"\\,",".") #HAY QUE PONER DOS PUNTOS SLASHES!!!!!
head(datos)
datos$`Precio del petróleo (barril Brent)`<-as.numeric(datos$`Precio del petróleo (barril Brent)`)
head(datos)
#cleaning dates
#quito espacios en blanco en las fechas
datos$X__1<-stri_trim(datos$X__1)
head(datos$X__1)
#paso las fechas datos español a fechas datos ingles datostedibles por R
datos$X__1<-parse_date(datos$X__1,"%Y %B ",locale=locale("es"))#el primer datos no sale porque tidatose una (p) al final... simplemdatoste lo introduzco a mano
class(datos$X__1)
head(datos$X__1)
#tabla xts
#lo convierto datos una xts
precio_gas<-(xts(datos[,2], order.by = datos$X__1))
head(precio_gas)
nrow(precio_gas)
summary(precio_gas)
plot.xts(precio_gas)#datos en dólares
fets <- function(x, h) {
forecast(ets(x), h = h)
}
farima <- function(x, h) {
forecast(auto.arima(x), h = h)
}
e1 <- tsCV(IPI$general, fets, h = 1)
e2 <- tsCV(IPI$general, farima, h = 1)
MSE_ets<-mean(e1^2, na.rm = TRUE)
MSR_AR<-mean(e2^2, na.rm = TRUE)
MSE_ets
MSE_AR
IPI$general %>% ets() %>% forecast(h = 10) %>% autoplot()
autoplot(IPI$general, IPI$energía, facets = TRUE)
fit <- auto.arima(IPI$general,xreg = IPI$energía)
summary(fit)
cbind("Regression Errors" = residuals(fit, type="regression"),
"ARIMA errors" = residuals(fit, type="innovation")) %>%
autoplot(facets=TRUE)
checkresiduals(fit) #no es white noise..
forecast(fit, xreg = cbind(rep(mean(window(IPI$energía,start = "2015-01-01", end = end(IPI)),10))))
nnfit<- nnetar(IPI$general, lambda = 0)
autoplot(forecast(nnfit, h =10))
help(nnetar)
fcast <- forecast(nnfit, PI=TRUE, h=30)
autoplot(fcast)
fcast <- forecast(nnfit, PI=FALSE, h=30)
autoplot(fcast)
fcast <- forecast(nnfit, PI=TRUE, h=30)
autoplot(fcast)
#convierto las cadenas a números
EN[,2:4]<-as.data.frame.numeric(EN[,2,4])
#convierto las cadenas a números
head(EN)
#convierto las cadenas a números
head(EN,3)
#comprobando
remove(EN)
setwd("~/Documentos/Rstudio/TFM/Producción_disponibilidad_consumo_energía_eléctricas")
EN<-read_xls('ENERGIA.xls',skip = 7, na = "..", n_max = 333)
head(EN)
#limpiando
EN$X__1<-stri_trim(EN$X__1)
#Elimino la primero línea que pone canarias
EN<-EN[-c(1),]
head(EN, n = 10)
EN$X__1<-parse_date(EN$X__1,"%Y %B ",locale=locale("es"))#el primer EN no sale porque tiene una (p) al final... simplemente lo introduzco a mano
class(EN$X__1)
EN[,2:4]<-as.data.frame.numeric(EN[,2,4])
head(EN,3)
df<-data.frame(datos[,2:length(datos)])
#Buvle que busca las columnas que son caracteres y las pasada a data frame
for (n in c(1:length(df))) {
if (is.numeric(df[,n])== FALSE){
df[,n] = as.numeric(df[,n])}
}
str(df)
head(df)
lapply(N[,2:4], as.numeric)
lapply(EN[,2:4], as.numeric)
EN[,2:4]<-lapply(EN[,2:4], as.numeric)
head(EN)
head(EN,3)
#lo convierto en una xts
EN<-(xts(EN[,2:4], order.by = EN$X__1))
class(EN)
head(EN)
remove(EN)
#####################################ENERGÍA#####################################
#Producción bruta, disponibilidad y consumo de energía eléctrica por islas de Canarias y periodos.
setwd("~/Documentos/Rstudio/TFM/Producción_disponibilidad_consumo_energía_eléctricas")
EN<-read_xls('ENERGIA.xls',skip = 7, na = "..", n_max = 333)
#comprobando
head(EN)
str(EN)
tail(EN)
summary(EN)
#limpiando
EN$X__1<-stri_trim(EN$X__1)
#Elimino la primero línea que pone canarias
EN<-EN[-c(1),]
head(EN, n = 10)
#paso las fechas en español a fechas en ingles entedibles por R
EN$X__1<-parse_date(EN$X__1,"%Y %B ",locale=locale("es"))#el primer EN no sale porque tiene una (p) al final... simplemente lo introduzco a mano
class(EN$X__1)
#convierto las cadenas a números
EN[,2:4]<-lapply(EN[,2:4], as.numeric)
head(EN,3)
#lo convierto en una xts
EN<-(xts(EN[,2:4], order.by = EN$X__1))
class(EN)
head(EN)
tail(EN)
summary(EN)
plot.zoo(x = EN[ ,c(names(EN))])
EN_diff<-diff(EN) #PORQUÉ No funciona??
plot.zoo(x = EN_diff[ ,c(names(EN))])
head(EN,3)
tail(EN)
summary(EN)
plot.zoo(x = EN[ ,c(names(EN))])
#####################################ENERGÍA#####################################
#Producción bruta, disponibilidad y consumo de energía eléctrica por islas de Canarias y periodos.
setwd("~/Documentos/Rstudio/TFM/Producción_disponibilidad_consumo_energía_eléctricas")
EN<-read_xls('ENERGIA.xls',skip = 7, na = "..", n_max = 333)
#comprobando
head(EN)
str(EN)
tail(EN)
summary(EN)
#limpiando
EN$X__1<-stri_trim(EN$X__1)
#Elimino la primero línea que pone canarias
EN<-EN[-c(1),]
head(EN, n = 10)
#paso las fechas en español a fechas en ingles entedibles por R
EN$X__1<-parse_date(EN$X__1,"%Y %B ",locale=locale("es"))#el primer EN no sale porque tiene una (p) al final... simplemente lo introduzco a mano
class(EN$X__1)
#convierto las cadenas a números
EN[,2:4]<-lapply(EN[,2:4], as.numeric)
head(EN,3)
#lo convierto en una xts
EN<-(xts(EN[,2:4], order.by = EN$X__1))
class(EN)
head(EN)
tail(EN)
summary(EN)
plot.zoo(x = EN[ ,c(names(EN))])
EN_diff<-diff(EN) #PORQUÉ No funciona??
plot.zoo(x = EN_diff[ ,c(names(EN))])
plot.zoo(x = EN[ ,c(names(EN))])
plot.zoo(x = EN[ ,c(names(EN))])
head(EN,3)
str(EN)
summary(EN)
